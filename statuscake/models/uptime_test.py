# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from statuscake.models.monitoring_location import MonitoringLocation
from statuscake.models.uptime_test_check_rate import UptimeTestCheckRate
from statuscake.models.uptime_test_processing_state import UptimeTestProcessingState
from statuscake.models.uptime_test_status import UptimeTestStatus
from statuscake.models.uptime_test_type import UptimeTestType
from typing import Optional, Set
from typing_extensions import Self

class UptimeTest(BaseModel):
    """
    UptimeTest
    """ # noqa: E501
    id: StrictStr = Field(description="Uptime check ID")
    name: StrictStr = Field(description="Name of the check")
    test_type: UptimeTestType
    website_url: StrictStr = Field(description="URL, FQDN, or IP address of the server under test")
    check_rate: UptimeTestCheckRate
    confirmation: Annotated[int, Field(le=3, strict=True, ge=0)] = Field(description="Number of confirmation servers to confirm downtime before an alert is triggered")
    contact_groups: List[StrictStr] = Field(description="List of contact group IDs")
    custom_header: Optional[StrictStr] = Field(default=None, description="JSON object. Represents headers to be sent when making requests")
    dns_ips: List[StrictStr] = Field(description="List of IP addresses to compare against returned DNS records")
    dns_server: Optional[StrictStr] = Field(default=None, description="FQDN or IP address of the nameserver to query")
    do_not_find: StrictBool = Field(description="Whether to consider the check as down if the content is present within the response")
    enable_ssl_alert: StrictBool = Field(description="Whether to send an alert if the SSL certificate is soon to expire")
    final_endpoint: Optional[StrictStr] = Field(default=None, description="Specify where the redirect chain should end")
    find_string: Optional[StrictStr] = Field(default=None, description="String to look for within the response. Considered down if not found")
    follow_redirects: StrictBool = Field(description="Whether to follow redirects when testing. Disabled by default")
    include_header: StrictBool = Field(description="Include header content in string match search")
    host: Optional[StrictStr] = Field(default=None, description="Name of the hosting provider")
    last_tested_at: Optional[datetime] = Field(default=None, description="When the check was last run (RFC3339 format)")
    next_location: Optional[StrictStr] = Field(default=None, description="The server location the check will run next")
    paused: StrictBool = Field(description="Whether the check should be run")
    port: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Destination port for TCP checks")
    post_body: Optional[StrictStr] = Field(default=None, description="JSON object. Payload submitted with the request. Setting this updates the check to use the HTTP POST verb")
    post_raw: Optional[StrictStr] = Field(default=None, description="Raw HTTP POST string to send to the server")
    processing: StrictBool = Field(description="Whether the check is currently being processed")
    processing_on: Optional[StrictStr] = Field(default=None, description="The server location the check is currently being run")
    processing_state: Optional[UptimeTestProcessingState] = None
    servers: List[MonitoringLocation] = Field(description="List of assigned monitoring locations on which to run checks")
    status: UptimeTestStatus
    status_codes: List[StrictStr] = Field(description="List of status codes that trigger an alert")
    tags: List[StrictStr] = Field(description="List of tags")
    timeout: Annotated[int, Field(le=75, strict=True, ge=5)] = Field(description="The number of seconds to wait to receive the first byte")
    trigger_rate: Annotated[int, Field(le=60, strict=True, ge=0)] = Field(description="The number of minutes to wait before sending an alert")
    uptime: Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]] = Field(description="Uptime percentage for a check")
    use_jar: StrictBool = Field(description="Whether to enable cookie storage")
    user_agent: Optional[StrictStr] = Field(default=None, description="Custom user agent string set when testing")
    __properties: ClassVar[List[str]] = ["id", "name", "test_type", "website_url", "check_rate", "confirmation", "contact_groups", "custom_header", "dns_ips", "dns_server", "do_not_find", "enable_ssl_alert", "final_endpoint", "find_string", "follow_redirects", "include_header", "host", "last_tested_at", "next_location", "paused", "port", "post_body", "post_raw", "processing", "processing_on", "processing_state", "servers", "status", "status_codes", "tags", "timeout", "trigger_rate", "uptime", "use_jar", "user_agent"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UptimeTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in servers (list)
        _items = []
        if self.servers:
            for _item in self.servers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['servers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UptimeTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "test_type": obj.get("test_type"),
            "website_url": obj.get("website_url"),
            "check_rate": obj.get("check_rate"),
            "confirmation": obj.get("confirmation"),
            "contact_groups": obj.get("contact_groups"),
            "custom_header": obj.get("custom_header"),
            "dns_ips": obj.get("dns_ips"),
            "dns_server": obj.get("dns_server"),
            "do_not_find": obj.get("do_not_find"),
            "enable_ssl_alert": obj.get("enable_ssl_alert"),
            "final_endpoint": obj.get("final_endpoint"),
            "find_string": obj.get("find_string"),
            "follow_redirects": obj.get("follow_redirects"),
            "include_header": obj.get("include_header"),
            "host": obj.get("host"),
            "last_tested_at": obj.get("last_tested_at"),
            "next_location": obj.get("next_location"),
            "paused": obj.get("paused"),
            "port": obj.get("port"),
            "post_body": obj.get("post_body"),
            "post_raw": obj.get("post_raw"),
            "processing": obj.get("processing"),
            "processing_on": obj.get("processing_on"),
            "processing_state": obj.get("processing_state"),
            "servers": [MonitoringLocation.from_dict(_item) for _item in obj["servers"]] if obj.get("servers") is not None else None,
            "status": obj.get("status"),
            "status_codes": obj.get("status_codes"),
            "tags": obj.get("tags"),
            "timeout": obj.get("timeout"),
            "trigger_rate": obj.get("trigger_rate"),
            "uptime": obj.get("uptime"),
            "use_jar": obj.get("use_jar"),
            "user_agent": obj.get("user_agent")
        })
        return _obj


