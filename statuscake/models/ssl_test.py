# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from statuscake.models.ssl_test_check_rate import SSLTestCheckRate
from statuscake.models.ssl_test_flags import SSLTestFlags
from statuscake.models.ssl_test_mixed_content import SSLTestMixedContent
from typing import Optional, Set
from typing_extensions import Self

class SSLTest(BaseModel):
    """
    SSLTest
    """ # noqa: E501
    id: StrictStr = Field(description="SSL check ID")
    website_url: StrictStr = Field(description="URL of the server under test")
    check_rate: SSLTestCheckRate
    alert_at: List[StrictInt] = Field(description="List representing when alerts should be sent (days).")
    alert_broken: StrictBool = Field(description="Whether to enable alerts when SSL certificate issues are found")
    alert_expiry: StrictBool = Field(description="Whether to enable alerts when the SSL certificate is to expire")
    alert_mixed: StrictBool = Field(description="Whether to enable alerts when mixed content is found")
    alert_reminder: StrictBool = Field(description="Whether to enable alert reminders")
    certificate_score: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="SSL certificate score (%)")
    certificate_status: Optional[StrictStr] = Field(default=None, description="SSL certificate status")
    cipher: Optional[StrictStr] = Field(default=None, description="SSL/TLS cipher suite belonging to the SSL certificate")
    cipher_score: Optional[Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(default=None, description="SSL certificate cipher strength (%)")
    contact_groups: List[StrictStr] = Field(description="List of contact group IDs")
    issuer_common_name: Optional[StrictStr] = Field(default=None, description="Issuer of the SSL certificate")
    flags: Optional[SSLTestFlags] = None
    follow_redirects: StrictBool = Field(description="Whether to follow redirects when testing. Disabled by default")
    hostname: Optional[StrictStr] = Field(default=None, description="Hostname of the server under test")
    last_reminder: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The last reminder to have been sent (days)")
    mixed_content: List[SSLTestMixedContent] = Field(description="List of mixed content resources")
    paused: StrictBool = Field(description="Whether the check should be run")
    updated_at: Optional[datetime] = Field(default=None, description="When the SSL certificate was last updated (RFC3339 format)")
    user_agent: Optional[StrictStr] = Field(default=None, description="Custom user agent string set when testing")
    valid_from: Optional[datetime] = Field(default=None, description="SSL certificate validity start (RFC3339 format)")
    valid_until: Optional[datetime] = Field(default=None, description="SSL certificate validity end (RFC3339 format)")
    __properties: ClassVar[List[str]] = ["id", "website_url", "check_rate", "alert_at", "alert_broken", "alert_expiry", "alert_mixed", "alert_reminder", "certificate_score", "certificate_status", "cipher", "cipher_score", "contact_groups", "issuer_common_name", "flags", "follow_redirects", "hostname", "last_reminder", "mixed_content", "paused", "updated_at", "user_agent", "valid_from", "valid_until"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SSLTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flags
        if self.flags:
            _dict['flags'] = self.flags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in mixed_content (list)
        _items = []
        if self.mixed_content:
            for _item in self.mixed_content:
                if _item:
                    _items.append(_item.to_dict())
            _dict['mixed_content'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SSLTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "website_url": obj.get("website_url"),
            "check_rate": obj.get("check_rate"),
            "alert_at": obj.get("alert_at"),
            "alert_broken": obj.get("alert_broken"),
            "alert_expiry": obj.get("alert_expiry"),
            "alert_mixed": obj.get("alert_mixed"),
            "alert_reminder": obj.get("alert_reminder"),
            "certificate_score": obj.get("certificate_score"),
            "certificate_status": obj.get("certificate_status"),
            "cipher": obj.get("cipher"),
            "cipher_score": obj.get("cipher_score"),
            "contact_groups": obj.get("contact_groups"),
            "issuer_common_name": obj.get("issuer_common_name"),
            "flags": SSLTestFlags.from_dict(obj["flags"]) if obj.get("flags") is not None else None,
            "follow_redirects": obj.get("follow_redirects"),
            "hostname": obj.get("hostname"),
            "last_reminder": obj.get("last_reminder"),
            "mixed_content": [SSLTestMixedContent.from_dict(_item) for _item in obj["mixed_content"]] if obj.get("mixed_content") is not None else None,
            "paused": obj.get("paused"),
            "updated_at": obj.get("updated_at"),
            "user_agent": obj.get("user_agent"),
            "valid_from": obj.get("valid_from"),
            "valid_until": obj.get("valid_until")
        })
        return _obj


