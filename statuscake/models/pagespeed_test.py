# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from statuscake.models.pagespeed_test_check_rate import PagespeedTestCheckRate
from statuscake.models.pagespeed_test_stats import PagespeedTestStats
from typing import Optional, Set
from typing_extensions import Self

class PagespeedTest(BaseModel):
    """
    PagespeedTest
    """ # noqa: E501
    id: StrictStr = Field(description="Pagespeed check ID")
    name: StrictStr = Field(description="Name of the check")
    website_url: StrictStr = Field(description="URL, FQDN, or IP address of the website under test")
    check_rate: PagespeedTestCheckRate
    alert_bigger: Annotated[int, Field(strict=True, ge=0)] = Field(description="An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent.")
    alert_slower: Annotated[int, Field(strict=True, ge=0)] = Field(description="An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent")
    alert_smaller: Annotated[int, Field(strict=True, ge=0)] = Field(description="An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent")
    contact_groups: List[StrictStr] = Field(description="List of contact group IDs")
    latest_stats: Optional[PagespeedTestStats] = None
    location: StrictStr = Field(description="Assigned monitoring location on which checks will be run")
    paused: StrictBool = Field(description="Whether the check should be run")
    __properties: ClassVar[List[str]] = ["id", "name", "website_url", "check_rate", "alert_bigger", "alert_slower", "alert_smaller", "contact_groups", "latest_stats", "location", "paused"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagespeedTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_stats
        if self.latest_stats:
            _dict['latest_stats'] = self.latest_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagespeedTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "website_url": obj.get("website_url"),
            "check_rate": obj.get("check_rate"),
            "alert_bigger": obj.get("alert_bigger"),
            "alert_slower": obj.get("alert_slower"),
            "alert_smaller": obj.get("alert_smaller"),
            "contact_groups": obj.get("contact_groups"),
            "latest_stats": PagespeedTestStats.from_dict(obj["latest_stats"]) if obj.get("latest_stats") is not None else None,
            "location": obj.get("location"),
            "paused": obj.get("paused")
        })
        return _obj


