# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from statuscake.models.api_response import APIResponse
from statuscake.models.ssl_test_check_rate import SSLTestCheckRate
from statuscake.models.ssl_test_response import SSLTestResponse
from statuscake.models.ssl_tests import SSLTests

from statuscake.api_client import ApiClient, RequestSerialized
from statuscake.api_response import ApiResponse
from statuscake.rest import RESTResponseType


class SslApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_ssl_test(
        self,
        website_url: Annotated[StrictStr, Field(description="URL of the server under test. Must begin with https://")],
        check_rate: SSLTestCheckRate,
        alert_at: Annotated[List[StrictInt], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")],
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIResponse:
        """Create an SSL check

        Creates an SSL check with the given parameters.

        :param website_url: URL of the server under test. Must begin with https:// (required)
        :type website_url: str
        :param check_rate: (required)
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values (required)
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ssl_test_serialize(
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_ssl_test_with_http_info(
        self,
        website_url: Annotated[StrictStr, Field(description="URL of the server under test. Must begin with https://")],
        check_rate: SSLTestCheckRate,
        alert_at: Annotated[List[StrictInt], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")],
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIResponse]:
        """Create an SSL check

        Creates an SSL check with the given parameters.

        :param website_url: URL of the server under test. Must begin with https:// (required)
        :type website_url: str
        :param check_rate: (required)
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values (required)
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ssl_test_serialize(
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_ssl_test_without_preload_content(
        self,
        website_url: Annotated[StrictStr, Field(description="URL of the server under test. Must begin with https://")],
        check_rate: SSLTestCheckRate,
        alert_at: Annotated[List[StrictInt], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")],
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create an SSL check

        Creates an SSL check with the given parameters.

        :param website_url: URL of the server under test. Must begin with https:// (required)
        :type website_url: str
        :param check_rate: (required)
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values (required)
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_ssl_test_serialize(
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_ssl_test_serialize(
        self,
        website_url,
        check_rate,
        alert_at,
        alert_broken,
        alert_expiry,
        alert_mixed,
        alert_reminder,
        contact_groups,
        follow_redirects,
        hostname,
        paused,
        user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'alert_at': 'csv',
            'contact_groups': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if website_url is not None:
            _form_params.append(('website_url', website_url))
        if check_rate is not None:
            _form_params.append(('check_rate', check_rate))
        if alert_at is not None:
            _form_params.append(('alert_at', alert_at))
        if alert_broken is not None:
            _form_params.append(('alert_broken', alert_broken))
        if alert_expiry is not None:
            _form_params.append(('alert_expiry', alert_expiry))
        if alert_mixed is not None:
            _form_params.append(('alert_mixed', alert_mixed))
        if alert_reminder is not None:
            _form_params.append(('alert_reminder', alert_reminder))
        if contact_groups is not None:
            _form_params.append(('contact_groups', contact_groups))
        if follow_redirects is not None:
            _form_params.append(('follow_redirects', follow_redirects))
        if hostname is not None:
            _form_params.append(('hostname', hostname))
        if paused is not None:
            _form_params.append(('paused', paused))
        if user_agent is not None:
            _form_params.append(('user_agent', user_agent))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/ssl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_ssl_test(
        self,
        test_id: Annotated[StrictStr, Field(description="Pagespeed check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete an SSL check

        Deletes an SSL check with the given id.

        :param test_id: Pagespeed check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_ssl_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="Pagespeed check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete an SSL check

        Deletes an SSL check with the given id.

        :param test_id: Pagespeed check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_ssl_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="Pagespeed check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete an SSL check

        Deletes an SSL check with the given id.

        :param test_id: Pagespeed check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_ssl_test_serialize(
        self,
        test_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/ssl/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ssl_test(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SSLTestResponse:
        """Retrieve an SSL check

        Returns an SSL check with the given id.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ssl_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SSLTestResponse]:
        """Retrieve an SSL check

        Returns an SSL check with the given id.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ssl_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve an SSL check

        Returns an SSL check with the given id.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ssl_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ssl_test_serialize(
        self,
        test_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ssl/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_ssl_tests(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of SSL checks to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SSLTests:
        """Get all SSL checks

        Returns a list of SSL checks for an account.

        :param page: Page of results
        :type page: int
        :param limit: The number of SSL checks to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_ssl_tests_serialize(
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_ssl_tests_with_http_info(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of SSL checks to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SSLTests]:
        """Get all SSL checks

        Returns a list of SSL checks for an account.

        :param page: Page of results
        :type page: int
        :param limit: The number of SSL checks to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_ssl_tests_serialize(
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_ssl_tests_without_preload_content(
        self,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of SSL checks to return per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all SSL checks

        Returns a list of SSL checks for an account.

        :param page: Page of results
        :type page: int
        :param limit: The number of SSL checks to return per page
        :type limit: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_ssl_tests_serialize(
            page=page,
            limit=limit,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SSLTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_ssl_tests_serialize(
        self,
        page,
        limit,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/ssl',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_ssl_test(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        website_url: Annotated[Optional[StrictStr], Field(description="URL of the server under test. Must begin with https://")] = None,
        check_rate: Optional[SSLTestCheckRate] = None,
        alert_at: Annotated[Optional[List[StrictInt]], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")] = None,
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update an SSL check

        Updates an SSL check with the given parameters.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param website_url: URL of the server under test. Must begin with https://
        :type website_url: str
        :param check_rate:
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_ssl_test_serialize(
            test_id=test_id,
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_ssl_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        website_url: Annotated[Optional[StrictStr], Field(description="URL of the server under test. Must begin with https://")] = None,
        check_rate: Optional[SSLTestCheckRate] = None,
        alert_at: Annotated[Optional[List[StrictInt]], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")] = None,
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update an SSL check

        Updates an SSL check with the given parameters.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param website_url: URL of the server under test. Must begin with https://
        :type website_url: str
        :param check_rate:
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_ssl_test_serialize(
            test_id=test_id,
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_ssl_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="SSL check ID")],
        website_url: Annotated[Optional[StrictStr], Field(description="URL of the server under test. Must begin with https://")] = None,
        check_rate: Optional[SSLTestCheckRate] = None,
        alert_at: Annotated[Optional[List[StrictInt]], Field(description="List representing when alerts should be sent (days). Must be exactly 3 numerical values")] = None,
        alert_broken: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when SSL certificate issues are found")] = None,
        alert_expiry: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when the SSL certificate is to expire")] = None,
        alert_mixed: Annotated[Optional[StrictBool], Field(description="Whether to enable alerts when mixed content is found")] = None,
        alert_reminder: Annotated[Optional[StrictBool], Field(description="Whether to enable alert reminders")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        follow_redirects: Annotated[Optional[StrictBool], Field(description="Whether to follow redirects when testing. Disabled by default")] = None,
        hostname: Annotated[Optional[StrictStr], Field(description="Hostname of the server under test")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        user_agent: Annotated[Optional[StrictStr], Field(description="Custom user agent string set when testing")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update an SSL check

        Updates an SSL check with the given parameters.

        :param test_id: SSL check ID (required)
        :type test_id: str
        :param website_url: URL of the server under test. Must begin with https://
        :type website_url: str
        :param check_rate:
        :type check_rate: SSLTestCheckRate
        :param alert_at: List representing when alerts should be sent (days). Must be exactly 3 numerical values
        :type alert_at: List[int]
        :param alert_broken: Whether to enable alerts when SSL certificate issues are found
        :type alert_broken: bool
        :param alert_expiry: Whether to enable alerts when the SSL certificate is to expire
        :type alert_expiry: bool
        :param alert_mixed: Whether to enable alerts when mixed content is found
        :type alert_mixed: bool
        :param alert_reminder: Whether to enable alert reminders
        :type alert_reminder: bool
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param follow_redirects: Whether to follow redirects when testing. Disabled by default
        :type follow_redirects: bool
        :param hostname: Hostname of the server under test
        :type hostname: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param user_agent: Custom user agent string set when testing
        :type user_agent: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_ssl_test_serialize(
            test_id=test_id,
            website_url=website_url,
            check_rate=check_rate,
            alert_at=alert_at,
            alert_broken=alert_broken,
            alert_expiry=alert_expiry,
            alert_mixed=alert_mixed,
            alert_reminder=alert_reminder,
            contact_groups=contact_groups,
            follow_redirects=follow_redirects,
            hostname=hostname,
            paused=paused,
            user_agent=user_agent,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_ssl_test_serialize(
        self,
        test_id,
        website_url,
        check_rate,
        alert_at,
        alert_broken,
        alert_expiry,
        alert_mixed,
        alert_reminder,
        contact_groups,
        follow_redirects,
        hostname,
        paused,
        user_agent,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'alert_at': 'csv',
            'contact_groups': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if website_url is not None:
            _form_params.append(('website_url', website_url))
        if check_rate is not None:
            _form_params.append(('check_rate', check_rate))
        if alert_at is not None:
            _form_params.append(('alert_at', alert_at))
        if alert_broken is not None:
            _form_params.append(('alert_broken', alert_broken))
        if alert_expiry is not None:
            _form_params.append(('alert_expiry', alert_expiry))
        if alert_mixed is not None:
            _form_params.append(('alert_mixed', alert_mixed))
        if alert_reminder is not None:
            _form_params.append(('alert_reminder', alert_reminder))
        if contact_groups is not None:
            _form_params.append(('contact_groups', contact_groups))
        if follow_redirects is not None:
            _form_params.append(('follow_redirects', follow_redirects))
        if hostname is not None:
            _form_params.append(('hostname', hostname))
        if paused is not None:
            _form_params.append(('paused', paused))
        if user_agent is not None:
            _form_params.append(('user_agent', user_agent))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/ssl/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


