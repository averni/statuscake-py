# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from statuscake.models.api_response import APIResponse
from statuscake.models.heartbeat_test_response import HeartbeatTestResponse
from statuscake.models.heartbeat_tests import HeartbeatTests

from statuscake.api_client import ApiClient, RequestSerialized
from statuscake.api_response import ApiResponse
from statuscake.rest import RESTResponseType


class HeartbeatApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_heartbeat_test(
        self,
        name: Annotated[StrictStr, Field(description="Name of the check")],
        period: Annotated[int, Field(le=172800, strict=True, ge=30, description="Number of seconds since the last ping before the check is considered down")],
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> APIResponse:
        """Create a heartbeat check

        Creates a heartbeat check with the given parameters.

        :param name: Name of the check (required)
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down (required)
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_heartbeat_test_serialize(
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_heartbeat_test_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Name of the check")],
        period: Annotated[int, Field(le=172800, strict=True, ge=30, description="Number of seconds since the last ping before the check is considered down")],
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[APIResponse]:
        """Create a heartbeat check

        Creates a heartbeat check with the given parameters.

        :param name: Name of the check (required)
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down (required)
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_heartbeat_test_serialize(
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_heartbeat_test_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Name of the check")],
        period: Annotated[int, Field(le=172800, strict=True, ge=30, description="Number of seconds since the last ping before the check is considered down")],
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a heartbeat check

        Creates a heartbeat check with the given parameters.

        :param name: Name of the check (required)
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down (required)
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_heartbeat_test_serialize(
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "APIResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_heartbeat_test_serialize(
        self,
        name,
        period,
        contact_groups,
        host,
        paused,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contact_groups': 'csv',
            'tags': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(('name', name))
        if period is not None:
            _form_params.append(('period', period))
        if contact_groups is not None:
            _form_params.append(('contact_groups', contact_groups))
        if host is not None:
            _form_params.append(('host', host))
        if paused is not None:
            _form_params.append(('paused', paused))
        if tags is not None:
            _form_params.append(('tags', tags))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/heartbeat',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_heartbeat_test(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Delete a heartbeat check

        Deletes a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_heartbeat_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Delete a heartbeat check

        Deletes a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_heartbeat_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete a heartbeat check

        Deletes a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_heartbeat_test_serialize(
        self,
        test_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/heartbeat/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_heartbeat_test(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HeartbeatTestResponse:
        """Retrieve a heartbeat check

        Returns a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_heartbeat_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HeartbeatTestResponse]:
        """Retrieve a heartbeat check

        Returns a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_heartbeat_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve a heartbeat check

        Returns a heartbeat check with the given id.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_heartbeat_test_serialize(
            test_id=test_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTestResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_heartbeat_test_serialize(
        self,
        test_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/heartbeat/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_heartbeat_tests(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Heartbeat check status")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of heartbeat checks to return per page")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="Comma separated list of tags assocaited with a check")] = None,
        matchany: Annotated[Optional[StrictBool], Field(description="Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        nouptime: Annotated[Optional[StrictBool], Field(description="Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HeartbeatTests:
        """Get all heartbeat checks

        Returns a list of heartbeat checks for an account.

        :param status: Heartbeat check status
        :type status: str
        :param page: Page of results
        :type page: int
        :param limit: The number of heartbeat checks to return per page
        :type limit: int
        :param tags: Comma separated list of tags assocaited with a check
        :type tags: str
        :param matchany: Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type matchany: bool
        :param nouptime: Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type nouptime: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_heartbeat_tests_serialize(
            status=status,
            page=page,
            limit=limit,
            tags=tags,
            matchany=matchany,
            nouptime=nouptime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_heartbeat_tests_with_http_info(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Heartbeat check status")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of heartbeat checks to return per page")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="Comma separated list of tags assocaited with a check")] = None,
        matchany: Annotated[Optional[StrictBool], Field(description="Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        nouptime: Annotated[Optional[StrictBool], Field(description="Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HeartbeatTests]:
        """Get all heartbeat checks

        Returns a list of heartbeat checks for an account.

        :param status: Heartbeat check status
        :type status: str
        :param page: Page of results
        :type page: int
        :param limit: The number of heartbeat checks to return per page
        :type limit: int
        :param tags: Comma separated list of tags assocaited with a check
        :type tags: str
        :param matchany: Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type matchany: bool
        :param nouptime: Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type nouptime: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_heartbeat_tests_serialize(
            status=status,
            page=page,
            limit=limit,
            tags=tags,
            matchany=matchany,
            nouptime=nouptime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_heartbeat_tests_without_preload_content(
        self,
        status: Annotated[Optional[StrictStr], Field(description="Heartbeat check status")] = None,
        page: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Page of results")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of heartbeat checks to return per page")] = None,
        tags: Annotated[Optional[StrictStr], Field(description="Comma separated list of tags assocaited with a check")] = None,
        matchany: Annotated[Optional[StrictBool], Field(description="Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        nouptime: Annotated[Optional[StrictBool], Field(description="Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all heartbeat checks

        Returns a list of heartbeat checks for an account.

        :param status: Heartbeat check status
        :type status: str
        :param page: Page of results
        :type page: int
        :param limit: The number of heartbeat checks to return per page
        :type limit: int
        :param tags: Comma separated list of tags assocaited with a check
        :type tags: str
        :param matchany: Include heartbeat checks in response that match any specified tag or all tags. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type matchany: bool
        :param nouptime: Do not calculate uptime percentages for results. This parameter does not take a value. The absence of this paratemer equates to `false` whilst the presence of thie paramerter equates to `true`.
        :type nouptime: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_heartbeat_tests_serialize(
            status=status,
            page=page,
            limit=limit,
            tags=tags,
            matchany=matchany,
            nouptime=nouptime,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HeartbeatTests",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_heartbeat_tests_serialize(
        self,
        status,
        page,
        limit,
        tags,
        matchany,
        nouptime,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if status is not None:
            
            _query_params.append(('status', status))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if tags is not None:
            
            _query_params.append(('tags', tags))
            
        if matchany is not None:
            
            _query_params.append(('matchany', matchany))
            
        if nouptime is not None:
            
            _query_params.append(('nouptime', nouptime))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/heartbeat',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_heartbeat_test(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        name: Annotated[Optional[StrictStr], Field(description="Name of the check")] = None,
        period: Annotated[Optional[Annotated[int, Field(le=172800, strict=True, ge=30)]], Field(description="Number of seconds since the last ping before the check is considered down")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Update a heartbeat check

        Updates a heartbeat check with the given parameters.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param name: Name of the check
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_heartbeat_test_serialize(
            test_id=test_id,
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_heartbeat_test_with_http_info(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        name: Annotated[Optional[StrictStr], Field(description="Name of the check")] = None,
        period: Annotated[Optional[Annotated[int, Field(le=172800, strict=True, ge=30)]], Field(description="Number of seconds since the last ping before the check is considered down")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Update a heartbeat check

        Updates a heartbeat check with the given parameters.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param name: Name of the check
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_heartbeat_test_serialize(
            test_id=test_id,
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_heartbeat_test_without_preload_content(
        self,
        test_id: Annotated[StrictStr, Field(description="Heartbeat check ID")],
        name: Annotated[Optional[StrictStr], Field(description="Name of the check")] = None,
        period: Annotated[Optional[Annotated[int, Field(le=172800, strict=True, ge=30)]], Field(description="Number of seconds since the last ping before the check is considered down")] = None,
        contact_groups: Annotated[Optional[List[StrictStr]], Field(description="List of contact group IDs")] = None,
        host: Annotated[Optional[StrictStr], Field(description="Name of the hosting provider")] = None,
        paused: Annotated[Optional[StrictBool], Field(description="Whether the check should be run")] = None,
        tags: Annotated[Optional[List[StrictStr]], Field(description="List of tags")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Update a heartbeat check

        Updates a heartbeat check with the given parameters.

        :param test_id: Heartbeat check ID (required)
        :type test_id: str
        :param name: Name of the check
        :type name: str
        :param period: Number of seconds since the last ping before the check is considered down
        :type period: int
        :param contact_groups: List of contact group IDs
        :type contact_groups: List[str]
        :param host: Name of the hosting provider
        :type host: str
        :param paused: Whether the check should be run
        :type paused: bool
        :param tags: List of tags
        :type tags: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_heartbeat_test_serialize(
            test_id=test_id,
            name=name,
            period=period,
            contact_groups=contact_groups,
            host=host,
            paused=paused,
            tags=tags,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_heartbeat_test_serialize(
        self,
        test_id,
        name,
        period,
        contact_groups,
        host,
        paused,
        tags,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contact_groups': 'csv',
            'tags': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if test_id is not None:
            _path_params['test_id'] = test_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        if name is not None:
            _form_params.append(('name', name))
        if period is not None:
            _form_params.append(('period', period))
        if contact_groups is not None:
            _form_params.append(('contact_groups', contact_groups))
        if host is not None:
            _form_params.append(('host', host))
        if paused is not None:
            _form_params.append(('paused', paused))
        if tags is not None:
            _form_params.append(('tags', tags))
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/x-www-form-urlencoded'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/heartbeat/{test_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


