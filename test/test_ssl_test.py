# coding: utf-8

"""
    StatusCake API

    StatusCake API endpoints to manage monitoring resources.  # Authentication  Documentation on API authentication can be found [here](https://developers.statuscake.com/guides/api/authentication).  # Ratelimiting  Documentation on API ratelimiting can be found [here](https://developers.statuscake.com/guides/api/ratelimiting).  # Errors  Documentation on error handling can be found [here](https://developers.statuscake.com/guides/api/errors).  # Handling Input Parameters  Documentation on input parameters, including how to pass arrays to API endpoints can be found [here](https://developers.statuscake.com/guides/api/parameters). 

    The version of the OpenAPI document: 1.2.0
    Contact: support@statuscake.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from statuscake.models.ssl_test import SSLTest

class TestSSLTest(unittest.TestCase):
    """SSLTest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SSLTest:
        """Test SSLTest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SSLTest`
        """
        model = SSLTest()
        if include_optional:
            return SSLTest(
                id = '',
                website_url = '',
                check_rate = 300,
                alert_at = [
                    56
                    ],
                alert_broken = True,
                alert_expiry = True,
                alert_mixed = True,
                alert_reminder = True,
                certificate_score = 0,
                certificate_status = '',
                cipher = '',
                cipher_score = 0,
                contact_groups = [
                    ''
                    ],
                issuer_common_name = '',
                flags = statuscake.models.ssl_test_flags.SSLTestFlags(
                    follow_redirects = True, 
                    has_mixed = True, 
                    has_pfs = True, 
                    is_broken = True, 
                    is_expired = True, 
                    is_extended = True, 
                    is_missing = True, 
                    is_revoked = True, ),
                follow_redirects = True,
                hostname = '',
                last_reminder = 0,
                mixed_content = [
                    statuscake.models.ssl_test_mixed_content.SSLTestMixedContent(
                        src = '', 
                        type = '', )
                    ],
                paused = True,
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                user_agent = '',
                valid_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                valid_until = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return SSLTest(
                id = '',
                website_url = '',
                check_rate = 300,
                alert_at = [
                    56
                    ],
                alert_broken = True,
                alert_expiry = True,
                alert_mixed = True,
                alert_reminder = True,
                contact_groups = [
                    ''
                    ],
                follow_redirects = True,
                mixed_content = [
                    statuscake.models.ssl_test_mixed_content.SSLTestMixedContent(
                        src = '', 
                        type = '', )
                    ],
                paused = True,
        )
        """

    def testSSLTest(self):
        """Test SSLTest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
